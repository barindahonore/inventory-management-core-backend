datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder", "fullTextSearchPostgres"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  role      Role       @default(STAFF)
  firstName String
  lastName  String
  phone     String?
  lastLogin DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  auditLogs AuditLog[]
  sales     Sale[]
  purchases Purchase[]

  @@index([email])
  @@map("users")
}

enum Role {
  ADMIN
  MANAGER
  STAFF
}

model Inventory {
  id                     String                  @id @default(uuid())
  sku                    String                  @unique
  name                   String
  description            String?
  quantity               Int
  minStock               Int                     @default(0)
  price                  Float
  cost                   Float
  taxType                String                  @default("B")
  classCode              String?
  barcode                String?
  location               String?
  supplier               Supplier?               @relation(fields: [supplierId], references: [id])
  supplierId             String?
  expiryDate             DateTime?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  adjustments            StockAdjustment[]
  movements              StockMovement[]
  sales                  SaleItem[]
  purchases              PurchaseItem[]
  rawMaterialProcess     RawMaterialProcessing[] @relation("RawMaterialProcess")
  finishedProductProcess RawMaterialProcessing[] @relation("FinishedProductProcess")

  @@index([name])
  @@index([classCode])
  @@map("inventory")
}

model Supplier {
  id          String      @id @default(uuid())
  tin         String      @unique
  name        String
  contactName String
  email       String?
  phone       String
  address     String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  inventories Inventory[]
  purchases   Purchase[]

  @@index([tin])
  @@map("suppliers")
}

model Customer {
  id        String   @id @default(uuid())
  tin       String?
  name      String
  phone     String
  email     String?
  address   String?
  createdAt DateTime @default(now())
  sales     Sale[]

  @@index([tin])
  @@map("customers")
}

model Sale {
  id           String      @id @default(uuid())
  customer     Customer    @relation(fields: [customerId], references: [id])
  customerId   String
  totalAmount  Float
  taxAmount    Float
  status       SaleStatus  @default(PENDING)
  invoiceId    String?
  createdAt    DateTime    @default(now())
  items        SaleItem[]
  rraInvoice   RRAInvoice? @relation(fields: [rraInvoiceId], references: [id])
  rraInvoiceId String?     @unique
  user         User        @relation(fields: [userId], references: [id])
  userId       String

  @@index([createdAt])
  @@map("sales")
}

model SaleItem {
  id          String    @id @default(uuid())
  sale        Sale      @relation(fields: [saleId], references: [id])
  saleId      String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String
  quantity    Int
  price       Float
  taxRate     Float

  @@map("sale_items")
}

enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
  REFUNDED
}

model Purchase {
  id          String         @id @default(uuid())
  supplier    Supplier       @relation(fields: [supplierId], references: [id])
  supplierId  String
  totalAmount Float
  status      PurchaseStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  items       PurchaseItem[]
  user        User           @relation(fields: [userId], references: [id])
  userId      String

  @@index([createdAt])
  @@map("purchases")
}

model PurchaseItem {
  id          String    @id @default(uuid())
  purchase    Purchase  @relation(fields: [purchaseId], references: [id])
  purchaseId  String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId String
  quantity    Int
  cost        Float

  @@map("purchase_items")
}

enum PurchaseStatus {
  PENDING
  RECEIVED
  CANCELLED
}

model RRAInvoice {
  id            String    @id @default(uuid())
  tin           String
  invoiceNumber String    @unique
  issueDate     DateTime
  totalAmount   Float
  taxAmount     Float
  status        RRAStatus @default(PENDING)
  submittedAt   DateTime?
  retryCount    Int       @default(0)
  items         Json
  response      Json?
  sale          Sale? // Removed explicit relation definition
  saleId        String?   @unique

  @@index([tin])
  @@index([invoiceNumber])
  @@map("rra_invoices")
}

enum RRAStatus {
  PENDING
  SUBMITTED
  FAILED
  VERIFIED
}

model AuditLog {
  id        String   @id @default(uuid())
  action    String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model StockAdjustment {
  id          String         @id @default(uuid())
  inventory   Inventory      @relation(fields: [inventoryId], references: [id])
  inventoryId String
  quantity    Int
  type        AdjustmentType
  reason      String?
  createdAt   DateTime       @default(now())

  @@map("stock_adjustments")
}

enum AdjustmentType {
  INCREASE
  DECREASE
  DAMAGE
  THEFT
}

model StockMovement {
  id           String    @id @default(uuid())
  inventory    Inventory @relation(fields: [inventoryId], references: [id])
  inventoryId  String
  fromLocation String
  toLocation   String
  quantity     Int
  createdAt    DateTime  @default(now())

  @@map("stock_movements")
}

model RawMaterialProcessing {
  id                String    @id @default(uuid())
  rawMaterial       Inventory @relation("RawMaterialProcess", fields: [rawMaterialId], references: [id])
  rawMaterialId     String
  finishedProduct   Inventory @relation("FinishedProductProcess", fields: [finishedProductId], references: [id])
  finishedProductId String
  quantityUsed      Int
  quantityProduced  Int
  createdAt         DateTime  @default(now())

  @@map("raw_material_processing")
}
