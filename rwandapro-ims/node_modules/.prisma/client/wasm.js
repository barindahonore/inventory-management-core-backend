
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.3.0
 * Query Engine version: acc0b9dd43eb689cbd20c9470515d719db10d0b0
 */
Prisma.prismaVersion = {
  client: "6.3.0",
  engine: "acc0b9dd43eb689cbd20c9470515d719db10d0b0"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  lastLogin: 'lastLogin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  description: 'description',
  quantity: 'quantity',
  minStock: 'minStock',
  price: 'price',
  cost: 'cost',
  taxType: 'taxType',
  classCode: 'classCode',
  barcode: 'barcode',
  location: 'location',
  supplierId: 'supplierId',
  expiryDate: 'expiryDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SupplierScalarFieldEnum = {
  id: 'id',
  tin: 'tin',
  name: 'name',
  contactName: 'contactName',
  email: 'email',
  phone: 'phone',
  address: 'address',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  tin: 'tin',
  name: 'name',
  phone: 'phone',
  email: 'email',
  address: 'address',
  createdAt: 'createdAt'
};

exports.Prisma.SaleScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  totalAmount: 'totalAmount',
  taxAmount: 'taxAmount',
  status: 'status',
  invoiceId: 'invoiceId',
  createdAt: 'createdAt',
  rraInvoiceId: 'rraInvoiceId',
  userId: 'userId'
};

exports.Prisma.SaleItemScalarFieldEnum = {
  id: 'id',
  saleId: 'saleId',
  inventoryId: 'inventoryId',
  quantity: 'quantity',
  price: 'price',
  taxRate: 'taxRate'
};

exports.Prisma.PurchaseScalarFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  totalAmount: 'totalAmount',
  status: 'status',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.PurchaseItemScalarFieldEnum = {
  id: 'id',
  purchaseId: 'purchaseId',
  inventoryId: 'inventoryId',
  quantity: 'quantity',
  cost: 'cost'
};

exports.Prisma.RRAInvoiceScalarFieldEnum = {
  id: 'id',
  tin: 'tin',
  invoiceNumber: 'invoiceNumber',
  issueDate: 'issueDate',
  totalAmount: 'totalAmount',
  taxAmount: 'taxAmount',
  status: 'status',
  submittedAt: 'submittedAt',
  retryCount: 'retryCount',
  items: 'items',
  response: 'response',
  saleId: 'saleId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  userId: 'userId',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.StockAdjustmentScalarFieldEnum = {
  id: 'id',
  inventoryId: 'inventoryId',
  quantity: 'quantity',
  type: 'type',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.StockMovementScalarFieldEnum = {
  id: 'id',
  inventoryId: 'inventoryId',
  fromLocation: 'fromLocation',
  toLocation: 'toLocation',
  quantity: 'quantity',
  createdAt: 'createdAt'
};

exports.Prisma.RawMaterialProcessingScalarFieldEnum = {
  id: 'id',
  rawMaterialId: 'rawMaterialId',
  finishedProductId: 'finishedProductId',
  quantityUsed: 'quantityUsed',
  quantityProduced: 'quantityProduced',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone'
};

exports.Prisma.InventoryOrderByRelevanceFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  description: 'description',
  taxType: 'taxType',
  classCode: 'classCode',
  barcode: 'barcode',
  location: 'location',
  supplierId: 'supplierId'
};

exports.Prisma.SupplierOrderByRelevanceFieldEnum = {
  id: 'id',
  tin: 'tin',
  name: 'name',
  contactName: 'contactName',
  email: 'email',
  phone: 'phone',
  address: 'address'
};

exports.Prisma.CustomerOrderByRelevanceFieldEnum = {
  id: 'id',
  tin: 'tin',
  name: 'name',
  phone: 'phone',
  email: 'email',
  address: 'address'
};

exports.Prisma.SaleOrderByRelevanceFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  invoiceId: 'invoiceId',
  rraInvoiceId: 'rraInvoiceId',
  userId: 'userId'
};

exports.Prisma.SaleItemOrderByRelevanceFieldEnum = {
  id: 'id',
  saleId: 'saleId',
  inventoryId: 'inventoryId'
};

exports.Prisma.PurchaseOrderByRelevanceFieldEnum = {
  id: 'id',
  supplierId: 'supplierId',
  userId: 'userId'
};

exports.Prisma.PurchaseItemOrderByRelevanceFieldEnum = {
  id: 'id',
  purchaseId: 'purchaseId',
  inventoryId: 'inventoryId'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.RRAInvoiceOrderByRelevanceFieldEnum = {
  id: 'id',
  tin: 'tin',
  invoiceNumber: 'invoiceNumber',
  saleId: 'saleId'
};

exports.Prisma.AuditLogOrderByRelevanceFieldEnum = {
  id: 'id',
  action: 'action',
  userId: 'userId'
};

exports.Prisma.StockAdjustmentOrderByRelevanceFieldEnum = {
  id: 'id',
  inventoryId: 'inventoryId',
  reason: 'reason'
};

exports.Prisma.StockMovementOrderByRelevanceFieldEnum = {
  id: 'id',
  inventoryId: 'inventoryId',
  fromLocation: 'fromLocation',
  toLocation: 'toLocation'
};

exports.Prisma.RawMaterialProcessingOrderByRelevanceFieldEnum = {
  id: 'id',
  rawMaterialId: 'rawMaterialId',
  finishedProductId: 'finishedProductId'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  STAFF: 'STAFF'
};

exports.SaleStatus = exports.$Enums.SaleStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  REFUNDED: 'REFUNDED'
};

exports.PurchaseStatus = exports.$Enums.PurchaseStatus = {
  PENDING: 'PENDING',
  RECEIVED: 'RECEIVED',
  CANCELLED: 'CANCELLED'
};

exports.RRAStatus = exports.$Enums.RRAStatus = {
  PENDING: 'PENDING',
  SUBMITTED: 'SUBMITTED',
  FAILED: 'FAILED',
  VERIFIED: 'VERIFIED'
};

exports.AdjustmentType = exports.$Enums.AdjustmentType = {
  INCREASE: 'INCREASE',
  DECREASE: 'DECREASE',
  DAMAGE: 'DAMAGE',
  THEFT: 'THEFT'
};

exports.Prisma.ModelName = {
  User: 'User',
  Inventory: 'Inventory',
  Supplier: 'Supplier',
  Customer: 'Customer',
  Sale: 'Sale',
  SaleItem: 'SaleItem',
  Purchase: 'Purchase',
  PurchaseItem: 'PurchaseItem',
  RRAInvoice: 'RRAInvoice',
  AuditLog: 'AuditLog',
  StockAdjustment: 'StockAdjustment',
  StockMovement: 'StockMovement',
  RawMaterialProcessing: 'RawMaterialProcessing'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
